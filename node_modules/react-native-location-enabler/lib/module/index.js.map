{"version":3,"sources":["index.tsx"],"names":["useState","useEffect","useCallback","NativeModules","NativeEventEmitter","Platform","LocationEnabler","EVENT_NAME","locationEnabler","addListener","listener","context","OS","once","PRIORITIES","getConstants","useLocationSettings","settings","initial","enabled","setEnabled","undefined","callback","listner","locationEnabled","checkSettings","remove","requestResolutionSettings"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,QAA5C,QAA4D,cAA5D;AASA,MAAM;AAAEC,EAAAA;AAAF,IAAsBH,aAA5B;AACA,MAAMI,UAAU,GAAG,0BAAnB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,IAAIJ,kBAAJ,CAAuBE,eAAvB,CAAxB;;AAEAA,eAAe,CAACG,WAAhB,GAA8B,CAACC,QAAD,EAAqBC,OAArB,KAC5BN,QAAQ,CAACO,EAAT,KAAgB,SAAhB,GACIJ,eAAe,CAACC,WAAhB,CAA4BF,UAA5B,EAAwCG,QAAxC,EAAkDC,OAAlD,CADJ,GAEI,MAAM,CAAE,CAHd;;AAKAL,eAAe,CAACO,IAAhB,GAAuB,CAACH,QAAD,EAAqBC,OAArB,KACrBH,eAAe,CAACK,IAAhB,CAAqBN,UAArB,EAAiCG,QAAjC,EAA2CC,OAA3C,CADF;;AAGAL,eAAe,CAACQ,UAAhB,GAA6BR,eAAe,CAACS,YAAhB,EAA7B;;AAEAT,eAAe,CAACU,mBAAhB,GAAsC,CACpCC,QADoC,EAEpCC,OAFoC,KAGf;AACrB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAiBkB,OAAO,IAAIG,SAA5B,CAAtC;AAEA,QAAMC,QAAQ,GAAGpB,WAAW,CAAC,MAAM;AACjC,UAAMqB,OAAO,GAAGjB,eAAe,CAACG,WAAhB,CACd;AAAA,UAAC;AAAEe,QAAAA;AAAF,OAAD;AAAA,aACEJ,UAAU,CAACI,eAAD,CADZ;AAAA,KADc,CAAhB;AAIAlB,IAAAA,eAAe,CAACmB,aAAhB,CAA8BR,QAA9B;AACA,QAAIE,OAAJ,EAAaI,OAAO,CAACG,MAAR,GAAb,KACK,OAAOH,OAAP;AACN,GAR2B,EAQzB,CAACJ,OAAD,EAAUF,QAAV,CARyB,CAA5B;AAUAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,OAAO,GAAGD,QAAQ,EAAxB;AACA,WAAO,MAAMC,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEG,MAAT,EAAb;AACD,GAHQ,EAGN,CAACJ,QAAD,CAHM,CAAT;AAKA,QAAMK,yBAAyB,GAAGzB,WAAW,CAC3C,MAAMI,eAAe,CAACqB,yBAAhB,CAA0CV,QAA1C,CADqC,EAE3C,CAACA,QAAD,CAF2C,CAA7C;AAKA,SAAO,CAACE,OAAD,EAAUQ,yBAAV,CAAP;AACD,CA3BD;;AA6BA,eAAerB,eAAf","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nimport type {\n  LocationEnablerType,\n  Listener,\n  Config,\n  LocationStatus,\n  LocationSettings,\n} from './types';\n\nconst { LocationEnabler } = NativeModules;\nconst EVENT_NAME = 'onChangeLocationSettings';\n\n// Override\nconst locationEnabler = new NativeEventEmitter(LocationEnabler);\n\nLocationEnabler.addListener = (listener: Listener, context?: any) =>\n  Platform.OS === 'android'\n    ? locationEnabler.addListener(EVENT_NAME, listener, context)\n    : () => {};\n\nLocationEnabler.once = (listener: Listener, context?: any) =>\n  locationEnabler.once(EVENT_NAME, listener, context);\n\nLocationEnabler.PRIORITIES = LocationEnabler.getConstants();\n\nLocationEnabler.useLocationSettings = (\n  settings: Config,\n  initial?: LocationStatus\n): LocationSettings => {\n  const [enabled, setEnabled] = useState<LocationStatus>(initial || undefined);\n\n  const callback = useCallback(() => {\n    const listner = LocationEnabler.addListener(\n      ({ locationEnabled }: { locationEnabled: boolean }) =>\n        setEnabled(locationEnabled)\n    );\n    LocationEnabler.checkSettings(settings);\n    if (enabled) listner.remove();\n    else return listner;\n  }, [enabled, settings]);\n\n  useEffect(() => {\n    const listner = callback();\n    return () => listner?.remove();\n  }, [callback]);\n\n  const requestResolutionSettings = useCallback(\n    () => LocationEnabler.requestResolutionSettings(settings),\n    [settings]\n  );\n\n  return [enabled, requestResolutionSettings];\n};\n\nexport default LocationEnabler as LocationEnablerType;\n"]}