{"version":3,"sources":["types.ts"],"names":["Priority"],"mappings":"AAEA,WAAYA,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;GAAAA,Q,KAAAA,Q","sourcesContent":["import type { EmitterSubscription } from 'react-native';\n\nexport enum Priority {\n  HIGH_ACCURACY = 100,\n  BALANCED_POWER_ACCURACY = 102,\n  LOW_POWER = 104,\n  NO_POWER = 105,\n}\n\nexport type Priorities = {\n  /**\n   * Request the most accurate locations available.\n   */\n  HIGH_ACCURACY: Priority.HIGH_ACCURACY;\n\n  /**\n   * Request \"block\" level accuracy.\n   */\n  BALANCED_POWER_ACCURACY: Priority.BALANCED_POWER_ACCURACY;\n\n  /**\n   * Request \"city\" level accuracy.\n   */\n  LOW_POWER: Priority.LOW_POWER;\n\n  /**\n   * Request the best accuracy possible with zero additional power consumption.\n   */\n  NO_POWER: Priority.NO_POWER;\n};\n\nexport type Config = {\n  priority?: Priority;\n\n  /**\n   * Whether or not location is required by the calling app in order to continue.\n   * Set this to true if location is required to continue and false if having location provides\n   * better results, but is not required. This changes the wording/appearance of the dialog accordingly.\n   */\n  alwaysShow?: boolean;\n\n  /**\n   * Sets whether the client wants BLE scan to be enabled.\n   * When this flag is set to true, if the platform supports BLE scan mode and Bluetooth is off,\n   * the dialog will prompt the user to enable BLE scan. If the platform doesn't support BLE scan mode,\n   * the dialog will prompt to enable Bluetooth.\n   */\n  needBle?: boolean;\n};\n\nexport type Listener = (args: { locationEnabled: boolean }) => void;\n\nexport type LocationStatus = boolean | undefined;\n\nexport type LocationSettings = [LocationStatus, () => void];\n\nexport interface LocationEnablerType {\n  /**\n   * Static object contain a list quality of service for location updates.\n   * If your application wants high accuracy location it should set prioprity to 'HIGH_ACCURACY'\n   * If you want negligible power impact, but to still receive location updates when available,\n   * then set priority to 'NO_POWER'.\n   */\n  PRIORITIES: Priorities;\n\n  /**\n   * Hook let you check the user's device location status 'on' / 'off' and method let you display an activity where they can turn location 'on'.\n   *\n   * @param config -\n   * @param initial? -\n   * @returns LocationSettings - location status\n   */\n  useLocationSettings(\n    config: Config,\n    initial?: LocationStatus\n  ): LocationSettings;\n\n  /**\n   * Checking if the user's device location is turned off.\n   *\n   * @param config -\n   */\n  checkSettings(config: Config): void;\n\n  /**\n   * Display an activity where the user's can turn location 'on'.\n   *\n   * @param config -\n   */\n  requestResolutionSettings(config: Config): void;\n\n  /**\n   * Adds a listener to be invoked when onChangeLocationSettings are emitted.\n   * An optional calling context may be provided. The data arguments emitted\n   * will be passed to the listener function.\n   *\n   * @param listener - Function to invoke when the specified event is emitted\n   * @param context - Optional context object to use when invoking the listener\n   */\n  addListener(listener: Listener, context?: any): EmitterSubscription;\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param listener - Function to invoke only once when the specified event is emitted\n   * @param context - context object to use when invoking the listener\n   */\n  once(listener: Listener, context?: any): EmitterSubscription;\n}\n"]}