{"version":3,"sources":["index.tsx"],"names":["LocationEnabler","NativeModules","EVENT_NAME","locationEnabler","NativeEventEmitter","addListener","listener","context","Platform","OS","once","PRIORITIES","getConstants","useLocationSettings","settings","initial","enabled","setEnabled","undefined","callback","listner","locationEnabled","checkSettings","remove","requestResolutionSettings"],"mappings":";;;;;;;AAAA;;AACA;;AASA,MAAM;AAAEA,EAAAA;AAAF,IAAsBC,0BAA5B;AACA,MAAMC,UAAU,GAAG,0BAAnB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,IAAIC,+BAAJ,CAAuBJ,eAAvB,CAAxB;;AAEAA,eAAe,CAACK,WAAhB,GAA8B,CAACC,QAAD,EAAqBC,OAArB,KAC5BC,sBAASC,EAAT,KAAgB,SAAhB,GACIN,eAAe,CAACE,WAAhB,CAA4BH,UAA5B,EAAwCI,QAAxC,EAAkDC,OAAlD,CADJ,GAEI,MAAM,CAAE,CAHd;;AAKAP,eAAe,CAACU,IAAhB,GAAuB,CAACJ,QAAD,EAAqBC,OAArB,KACrBJ,eAAe,CAACO,IAAhB,CAAqBR,UAArB,EAAiCI,QAAjC,EAA2CC,OAA3C,CADF;;AAGAP,eAAe,CAACW,UAAhB,GAA6BX,eAAe,CAACY,YAAhB,EAA7B;;AAEAZ,eAAe,CAACa,mBAAhB,GAAsC,CACpCC,QADoC,EAEpCC,OAFoC,KAGf;AACrB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB,qBAAyBF,OAAO,IAAIG,SAApC,CAA9B;AAEA,QAAMC,QAAQ,GAAG,wBAAY,MAAM;AACjC,UAAMC,OAAO,GAAGpB,eAAe,CAACK,WAAhB,CACd;AAAA,UAAC;AAAEgB,QAAAA;AAAF,OAAD;AAAA,aACEJ,UAAU,CAACI,eAAD,CADZ;AAAA,KADc,CAAhB;AAIArB,IAAAA,eAAe,CAACsB,aAAhB,CAA8BR,QAA9B;AACA,QAAIE,OAAJ,EAAaI,OAAO,CAACG,MAAR,GAAb,KACK,OAAOH,OAAP;AACN,GARgB,EAQd,CAACJ,OAAD,EAAUF,QAAV,CARc,CAAjB;AAUA,wBAAU,MAAM;AACd,UAAMM,OAAO,GAAGD,QAAQ,EAAxB;AACA,WAAO,MAAMC,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEG,MAAT,EAAb;AACD,GAHD,EAGG,CAACJ,QAAD,CAHH;AAKA,QAAMK,yBAAyB,GAAG,wBAChC,MAAMxB,eAAe,CAACwB,yBAAhB,CAA0CV,QAA1C,CAD0B,EAEhC,CAACA,QAAD,CAFgC,CAAlC;AAKA,SAAO,CAACE,OAAD,EAAUQ,yBAAV,CAAP;AACD,CA3BD;;eA6BexB,e","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nimport type {\n  LocationEnablerType,\n  Listener,\n  Config,\n  LocationStatus,\n  LocationSettings,\n} from './types';\n\nconst { LocationEnabler } = NativeModules;\nconst EVENT_NAME = 'onChangeLocationSettings';\n\n// Override\nconst locationEnabler = new NativeEventEmitter(LocationEnabler);\n\nLocationEnabler.addListener = (listener: Listener, context?: any) =>\n  Platform.OS === 'android'\n    ? locationEnabler.addListener(EVENT_NAME, listener, context)\n    : () => {};\n\nLocationEnabler.once = (listener: Listener, context?: any) =>\n  locationEnabler.once(EVENT_NAME, listener, context);\n\nLocationEnabler.PRIORITIES = LocationEnabler.getConstants();\n\nLocationEnabler.useLocationSettings = (\n  settings: Config,\n  initial?: LocationStatus\n): LocationSettings => {\n  const [enabled, setEnabled] = useState<LocationStatus>(initial || undefined);\n\n  const callback = useCallback(() => {\n    const listner = LocationEnabler.addListener(\n      ({ locationEnabled }: { locationEnabled: boolean }) =>\n        setEnabled(locationEnabled)\n    );\n    LocationEnabler.checkSettings(settings);\n    if (enabled) listner.remove();\n    else return listner;\n  }, [enabled, settings]);\n\n  useEffect(() => {\n    const listner = callback();\n    return () => listner?.remove();\n  }, [callback]);\n\n  const requestResolutionSettings = useCallback(\n    () => LocationEnabler.requestResolutionSettings(settings),\n    [settings]\n  );\n\n  return [enabled, requestResolutionSettings];\n};\n\nexport default LocationEnabler as LocationEnablerType;\n"]}